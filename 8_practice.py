# Напишите регулярное выражение, которое найдёт все слова «Ты» или «ты».
# Другие формы слова «ты», такие как «твой» и т. д. учитывать не следует.
# Нужно найти последовательности, подходящие по следующим условиям:
# Последовательность ты или Ты
# Не является подпоследовательностью

regex1 = r'\b[Тт]ы\b'


# Цвета в формате HEX - способ представления rgb-цветов в шестнадцатеричной системе счисления.
# Они состоят из 6 шестнадцатиричных чисел, каждая пара отвечает за свой цвет:
# Две первые цифры — красный
# Две в середине — зелёный
# Две последние цифры — синий
# Напишите регулярное выражение, которое будет находить валидные hex-цвета.
# Нужно найти последовательности, подходящие по следующим условиям:
# В начале стоит #
# Потом идёт последовательность из 6 шестнадцатеричных цифр верхнего и нижнего регистров: 0123456789abcdefABCDEF
# Последовательность не может быть подпоследовательностью

regex2 = r'\B#[0123456789abcdefABCDEF]{6}\b'


# Напишите регулярное выражение, которое найдёт все числа x, где:
# x ∈ [0, 1] т.е. 0 ≤ x ≤ 1
# Нужно найти числа x, подходящие по следующим условиям:
# x ∈ [0, 1] т.е. 0 ≤ x ≤ 1
# x может быть как и десятичной дробью, так и целым числом
# Если x - десятичная дробь, то её максимальная точность должна быть до сотых
# В тестах не будет 0.00/0.0 или 1.00/1.0. Эти числа будут записаны без плавающей точки

regex3 = r'\b(?:[01](?![\.\d])|0\.[0-9]{,2}(?!\w)\b)'


# Напишите регулярное выражение, которое найдёт все слова, содержащие в себе букву а.
# Нужно найти последовательности, подходящие по следующим условиям:
# Используются буквы кириллического алфавита нижнего и верхнего регистров
# Последовательность должна содержать как минимум одну букву а
# Заглавную А искать не нужно
# Последовательность не может быть подпоследовательностью

regex4 = r'\b[А-яЁё]*а[А-яЁё]*\b'


# Напишите регулярное выражение, которое найдёт слова, после которых следующим
# символом идёт один из следующих знаков препинания: .,:?!;
# Нужно найти последовательности, подходящие по следующим условиям:
# Состоит из букв кириллического алфавита нижнего и верхнего регистра
# После последовательности стоит один из знаков препинания: .,:?!;

regex5 = r'\b[А-яЁё]+(?=[.,:?!;])\b'


# Напишите регулярное выражение, которое найдёт первое слово в тексте.
# Нужно найти последовательности, подходящие по следующим условиям:
# Используются буквы кириллического алфавита верхнего и нижнего регистров
# В последовательности может содержаться дефис
# Последовательность стоит в начале строки, если её нет - первого слова нет

regex6 = r'^[А-яЁё-]+\b'


# Найдите все слова, которые начинаются на n или N.
# Нужно найти последовательности, подходящие по следующим условиям:
# Состоит из букв латинского алфавита нижнего и верхнего регистров, -
# Начинается на n или N
# Не может быть подпоследовательностью

regex7 = r'(?<!\S)[Nn][A-Za-z]*\-?[A-Za-z]*(?!\S)'


# Напишите регулярное выражение, которое найдёт все переменные, записанные в стиле lowerCamelCase.
# Нужно найти переменные, записаные в стиле lowerCamelCase, который включает в себя следующее:
# Первое слово начинается всегда с буквы нижнего регистра
# Последующие слова начинаются с букв в верхнем регистре
# Больше верхний регистр нигде не используется
# Используются буквы латинского алфавита
# Цифры в переменных из тестовых данных находятся только в конце

regex8 = r'\b[a-z]+(?:[A-Z][a-z]+)*[0-9]*\b'


# Напишите регулярное выражение, которое найдёт все переменные, записанные в стиле snake_case.
# Что нужно найти:
# Как вы уже поняли - snake_case это тоже стиль наименования переменных.
# В Python переменные принято называть, используя этот стиль. Вот что он из себя представляет:
# Всегда используется нижний регистр
# Слова разделяются нижним подчёркиванием
# Используются буквы латинского алфавита
# Цифры в переменных из тестовых данных находятся только в конце.

regex9 = r'\b[a-z]+(?:_(?:[a-z]+|[0-9]+))*\b'


# У Дурова отжали ВКонтакте, но он не сдался и создал уже не социальную сеть, а мессенджер - Телеграм.
# Вы наверное знаете, что в Телеграме любой пользователь может выбрать себе username,
# чтобы его было легче искать. Давайте поможем Паше и напишем регулярное выражение,
# которое будет проверять валидность username.
# Выполняются следующие условия:
# Используются символы a-z, A-Z, 0-9, _
# Длина от 5 до 32 символов включительно
# Не может начинаться с цифры или _
# Не может заканчиваться на _
# На самом деле есть ещё одно условие: username не может содержать в себе __,
# но на данный момент сделать такое будет трудновато.

regex10 = r'(?<!\S)[A-Za-z][A-Za-z0-9_]{3,30}[A-Za-z0-9](?!\S)'


# Найдите в тексте все названия файлов и их расширения.
# Нужно найти последовательности, подходящие по следующим условиям:
# Название файла состоит из: букв латинского алфавита верхнего и нижнего регистров, цифр, -
# Между названием и расширением файла стоит .
# Расширение файла состоит из букв латинского алфавита верхнего и нижнего регистров, цифр
# Минимальная длина названия и расширения - один символ
# Найденная последовательность может являться подпоследовательностью,
# только если стоит в абсолютном или относительном пути: C:\Users\test.txt,
# ../Users/test.txt, т.е. перед ней стоят символы / или \

regex11 = r'(?:(?<=[\\/\s])|(?<=^))[A-Za-z0-9-]+\.[A-Za-z0-9]+\b'


# Получите все идентификаторы видеороликов на YouTube, используя регулярные выражения.
# Нужно найти последовательности, подходящие по следующим условиям:
# Cостоит из символов латинского алфавита обоих регистров, цифр, а также _
# Перед последовательностью стоит v=

regex12 = r'(?<=v=)[A-Za-z0-9_]+'
